BACKUP ~ahungry_deletefier/backup~
AUTHOR ~Ahungry~
VERSION 1.0

BEGIN ~Ahungry's Deletefier~ DESIGNATED 1 LABEL ahungry_deletefier_prelude
REQUIRE_PREDICATE (GAME_IS ~bgee bg2ee eet iwdee~) ~Game not supported.~

PRINT ~
WARNING: You will NOT be able to complete certain quests as expected with this mod.  Accepting that
will (perhaps) add some replayability - or let CLUAConsole be your friend for items you feel
you should have received (use NearInfinity or EEKeeper on another saved game to find the item codes).

Probability legend:

   0   = no items deleted (why are you installing this mod again?)
   50  = half of all items are deleted
   99  = items have a 1 percent chance to be present
   100 = all items are deleted that aren't script creations/random npc loot (probably a bad idea!)

Hint: On a megamod (200+ mods) I enjoy 90+ - it makes gear acquisition exciting again.~

BEGIN ~Accept Warning (choose Install to proceed)~ DESIGNATED 1000 LABEL ahungry_deletefier_warning
REQUIRE_PREDICATE (MOD_IS_INSTALLED ~ahungry_deletefier/ahungry_deletefier.tp2~ 1) ""

// Unconventional item formats from various mods out there
OUTER_SPRINT rx_uncon_weap ".*\(cms\|cleaver\|misc75\|cmswq\|cmdaq\|polsw\|cmt\|cmax\|xstap\|soaitm\|flail\|wand\)"

OUTER_SPRINT rx_uncon_armr ".*\(rr#\|cmar\|bdbrd\|deitm\|anclk\|sheart\|macloc\|cmheal\|perrin\|armo\|xadvb\|bardic\|xseq\|cdia\|c0wl\|band\|xsorc\|c0mn\|rsenc\|cotwiz\|xbrbwiz\|axe\|pla\|circ\)"

// Some mod with DS at start of items adds a ton of powerful gear
OUTER_SPRINT rx_uncon_ds "^ds"

// List items we will always allow to remain (mostly basic things we're downgrading to)
// This may also contain some quest specific gear we want to avoid deleting (in the last half of rx)
// scrl3z = gorions, sclr75 = identify, scrl8c/scrlpet = stone to flesh
OUTER_SPRINT rx_keep "^\(ascr7\|sec7\|bh\|ntp\|a7\|ntblun06\|potn23\|scrlnei\|amul13co\|amul14\|ring06\|t1g\|boot06\|acq\|scrlauto\|scrl2y\|scrl2v\|scrl2w\|ag\|t1sa\|ac\|l#\|cmring05\|cmfood\|x#xz\|x#sil\|x#fai\|scrsec\|scrl2x\|scrl3b\|scrl3i\|d5_ckit\|flrbelt1\|t1m2\|c#q\|c#lc\|sw1h13\|scrltar\|scrl3z\|scrl75\|scrl8c\|scrlpet\|cdax2h1\|rr#bow02\|rr#sap01\|halb01\|sw2h01\|sw1h20\|sw1h46\|sw1h43\|sw1h48\|sw1h07\|sw1h04\|leat04\|leat01\|staf01\|ring19\|potn48\|ringjoia\|ringjos\|dagg01\|dagg06\|dagg07\|dagg19\|dagg08\|dagg05\|slng01\|ax1h01\|ax1h04\|sper01\|hamm01\|halb01\|blun01\|blun02\|blun04\|blun06\|shld05\|shld08\|shld09\|shld11\|shld15\|brac05\|belt05\|belt01\|shld16\|shld14\|shld13\|shld12\|shld10\|shld01\|shld04\|shld03\|xbow01\|xbow04\|bow01\|bow03\|bow05\|helm01\|helm02\|helm03\|chan01\|plat01\|chan04\|bull01\|arow01\|bolt01\|dart01\|potn08\|potn20\|c0\|sw1h12\|c#gr\|misc42\)"

OUTER_SPRINT rx_keep_2 "\(key\|ammo\|case\|misc\|lett\|bag\)"

// OUTER_SPRINT rx_keep "^ZZZZZZZZ$"
// OUTER_SPRINT rx_keep_2 "^ZZZZZZZZ$"

// We need to get the list of joinable NPCs and ensure we don't
// set any of their gear as undroppable (maybe we can still make
// some of it disappear though)
ACTION_CLEAR_ARRAY joinable_npcs

COPY_EXISTING_REGEXP GLOB ~^.+\.gam~ ~override~
  SET npc_size = 0x158 + 8
  READ_LONG 0x30 npc_off
  READ_LONG 0x34 npc_count

  TO_LOWER SOURCE_RES
  // PATCH_PRINT ~Looking at %SOURCE_RES% - npc count is: %npc_count%~

  FOR (index = 0 ; index < npc_count ; ++index) BEGIN // searches through party members
    READ_ASCII (npc_off + (npc_size * index) + 0xc) npc_name
    // PATCH_PRINT ~%npc_name% detected as joinable via baldur.gam!~
    DEFINE_ASSOCIATIVE_ARRAY joinable_npcs BEGIN "%npc_name%" => "x" END
  END
BUT_ONLY

COPY_EXISTING_REGEXP GLOB ~^.+\.cre~ ~override~
    TO_LOWER SOURCE_RES

    // Collect all joinable NPCs (thanks cdtweaks and CamDawg!)
    PATCH_IF (SOURCE_SIZE > 0x2d3) BEGIN
      READ_LONG 0x1cc "biography" ELSE 0
      PATCH_IF (("%biography%" < 2147483647) AND ("%biography%" > 0)) BEGIN
        // PATCH_PRINT ~%SOURCE_RES% detected as joinable via biography!~
        DEFINE_ASSOCIATIVE_ARRAY joinable_npcs BEGIN "%SOURCE_RES%" => "x" END
      END
    END

    // Try out deathvar approach (thanks Morpheus!)
    READ_ASCII  0x280 deathvar
    READ_BYTE   0x234 level
    PATCH_IF (FILE_CONTAINS_EVALUATED(~pdialog.2da~ ~%deathvar%~)) AND (level > 0) BEGIN
        // PATCH_PRINT ~%SOURCE_RES% detected as joinable via deathvar!~
        DEFINE_ASSOCIATIVE_ARRAY joinable_npcs BEGIN "%SOURCE_RES%" => "x" END
    END
BUT_ONLY

PRINT ~
Please choose a price cut off - any items that vendor above or equal to
this cut off will be impacted by the deletefier, any below will not.

Ex: If you choose 100, many level 1 and 2 scrolls, low level potions, and
quest items should remain untouched.~
ACTION_READLN ~price_cutoff~

OUTER_WHILE NOT(IS_AN_INT %price_cutoff%) BEGIN
  PRINT ~Your answer was not an integer.
Please enter your answer as an integer.
What is the price cut off?~
  ACTION_READLN ~price_cutoff~
END

ACTION_CLEAR_ARRAY enchanted_items

// Build up the list of 1 or higher enchantment items (weapons)
// Going to build up this list to include even more, as a lot of
// the mod added gear may be +3 or higher gear, with an enchantment level
// of 0 - one thing it does reasonably well is set a high price though
// whereas (probably) most quest gear is of a lower price.
COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
  READ_LONG  0x18 item_flags
  READ_SHORT 0x1c item_type
  READ_LONG  0x34 price
  READ_LONG  0x60 enchantment

  // https://gibberlings3.github.io/iesdp/file_formats/ie_formats/itm_v1.htm#Header_Flags
  // Check and ensure quest bit isn't set
  PATCH_IF (0 = (item_flags BAND 0x1)) BEGIN
    // https://gibberlings3.github.io/iesdp/file_formats/ie_formats/itm_v1.htm#Header_ItemType
    // Do not count these special things as enchanted (misc items and general junk)
    PATCH_IF (item_type != 0x0 AND item_type != 0x8 AND item_type != 0xd
              AND item_type != 0x21 AND item_type != 0x22 AND item_type != 0x24
              AND item_type != 0x25 AND item_type != 0x26 AND item_type != 0x31
              AND item_type != 0x3b AND item_type != 0x46) BEGIN
      // Then see if we have some enchantment or a high item price
      // This should also ensure expensive/rare scrolls get removed while
      // not removing basic ones for quests that don't tend to vend for much.
      PATCH_IF (enchantment > 0 OR price >= price_cutoff) BEGIN
        TO_LOWER SOURCE_RES
        // PATCH_PRINT ~%SOURCE_RES% may be deletefied! (based on random chances later on)~
        DEFINE_ASSOCIATIVE_ARRAY enchanted_items BEGIN "%SOURCE_RES%" => "%enchantment%" END
      END
    END
  END
BUT_ONLY // end of enchantment check

// COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
//   TO_LOWER SOURCE_RES // in subsequent blocks, this would be the resref name
//   // PATCH_IF !VARIABLE_IS_SET $enchanted_items("%SOURCE_RES%") BEGIN
//   //   PATCH_PRINT ~%SOURCE_RES% is needing to be patched!~
//   // END
//   PATCH_IF (VARIABLE_IS_SET $enchanted_items("%SOURCE_RES%")) BEGIN
//     PATCH_PRINT ~%SOURCE_RES% is needing to be patched due to second check!~
//   END
// BUT_ONLY // Simulate a scenario where we would update all the things not in first


BEGIN ~Stores~ DESIGNATED 2000 LABEL ahungry_deletefier_stores
REQUIRE_PREDICATE (MOD_IS_INSTALLED ~ahungry_deletefier/ahungry_deletefier.tp2~ 1000) ""

PRINT ~
Delete what percent of store items (books, misc, and some basic items will remain)?
Please enter your answer as an integer. [0-100]~
ACTION_READLN ~del_per_sto~

OUTER_WHILE NOT(IS_AN_INT %del_per_sto%) BEGIN
  PRINT ~Your answer was not an integer.
Please enter your answer as an integer.
What percent of store items would you like to have disappear?~
  ACTION_READLN ~del_per_sto~
END

PRINT ~Removing %del_per_sto% percent of store items, please be patient...~

// https://gibberlings3.github.io/iesdp/file_formats/ie_formats/sto_v1.htm
COPY_EXISTING_REGEXP GLOB ~^.+\.sto$~ ~override~
  // Iterate through items to see replaceable ones vs deleteables
  READ_LONG  0x34 itm_off
  READ_LONG  0x38 itm_num

  FOR (index = 0 ; index < itm_num ; ++index) BEGIN // searches through items
    READ_ASCII (itm_off + (0x1c * index)) item
    TO_LOWER item

    // Avoid removing items we force a keep on
    PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_keep%" = 1
          AND "%item%" STRING_COMPARE_REGEXP "%rx_keep_2%" = 1) BEGIN
      PATCH_IF RANDOM(1 100) <= %del_per_sto% BEGIN
        PATCH_IF VARIABLE_IS_SET $enchanted_items("%item%") BEGIN
          WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace with filler item
        END

        // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*wand" = 0) BEGIN // find item
        //   WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
        // END

        // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*potn" = 0) BEGIN // find item
        //   WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
        // END

        // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*scrl" = 0) BEGIN // find item
        //   WRITE_ASCII (itm_off + (0x1c * index)) "misc17" #8 // replace item
        // END

      END // End of rand
    END // End of rx_keep IF
  END // End of item loop
  LPF DELETE_STORE_ITEM STR_VAR item_to_delete = "misc17" END
BUT_ONLY // end of store pass 1

// // A second pass on store to remove the misc17 that was added first time around
// COPY_EXISTING_REGEXP GLOB ~^.+\.sto$~ ~override~
//   LPF DELETE_STORE_ITEM STR_VAR item_to_delete = "misc17" END
// BUT_ONLY // end of store pass 2



BEGIN ~Areas~ DESIGNATED 3000 LABEL ahungry_deletefier_areas
REQUIRE_PREDICATE (MOD_IS_INSTALLED ~ahungry_deletefier/ahungry_deletefier.tp2~ 1000) ""

PRINT ~
Delete what percent of area items (books, misc, and some basic items will remain)?
Please enter your answer as an integer. [0-100]~
ACTION_READLN ~del_per_are~

OUTER_WHILE NOT(IS_AN_INT %del_per_are%) BEGIN
  PRINT ~Your answer was not an integer.
Please enter your answer as an integer.
What percent of area items would you like to have disappear?~
  ACTION_READLN ~del_per_are~
END

PRINT ~Removing %del_per_are% percent of area items, please be patient...~

// https://gibberlings3.github.io/iesdp/file_formats/ie_formats/are_v1.htm
COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
  // Iterate through items to see replaceable ones vs deleteables
  READ_LONG  0x78 itm_off
  READ_SHORT  0x76 itm_num

  FOR (index = 0 ; index < itm_num ; ++index) BEGIN // searches through items
    READ_ASCII (itm_off + (0x14 * index)) item
    TO_LOWER item

    // Avoid removing basic items
    PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_keep%" = 1
          AND "%item%" STRING_COMPARE_REGEXP "%rx_keep_2%" = 1) BEGIN
      PATCH_IF (RANDOM(1 100) <= %del_per_are%) BEGIN
        PATCH_IF (VARIABLE_IS_SET $enchanted_items("%item%")) BEGIN
          WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace with filler item

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*staf" = 0) BEGIN // find staff item
              WRITE_ASCII (itm_off + (0x14 * index)) "staf01" #8 // replace with staf01
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw1h" = 0) BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "sw1h01" #8 // replace item
          END

          // Unconventional mod weapons
          PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_weap%" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "sw1h01" #8 // replace item
          END

          // Unconventional mod armor
          PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_armr%" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
          END

          // Unconventional DS stuff
          PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_ds%" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw2h" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "sw2h01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*dagg" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "dagg01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ax1h" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "ax1h01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ax2h" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "ax1h01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sper" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "sper01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hamm" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "hamm01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*halb" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "halb01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*blun" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "blun01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*scim" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*waki" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*kata" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw3h" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*mace" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "blun04" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shield" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "shld01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shld" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "shld01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shbu" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "shld08" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shlg" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "shld04" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shmd" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "shld03" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shsm" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "shld01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*xbow" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "xbow01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bow" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "bow05" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*slng" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "slng01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hel" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*helm" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ioun" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*cowl" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*amul" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "amul02" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*boot" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*belt" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "belt01" #8 // replace item
          END

          // clck handles cloaks AND robes for some reason...
          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*clck" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ring" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "ring01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*brac" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "brac01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*robe" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "clck11" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*leat" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*chan" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "chan01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plat" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "plat01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*armr" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*slea" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*pelt" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hide" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*chan" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "chan01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*spli" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "chan04" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plah" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "plat01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plaf" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "plat01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*arow" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "arow01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bull" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "bull01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bolt" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "bolt01" #8 // replace item
          END

          PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*dart" = 0)  BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "dart01" #8 // replace item
          END

        END // end of enchanted

        // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*wand" = 0)  BEGIN // find item
        //   WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
        // END

        // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*potn" = 0)  BEGIN // find item
        //   WRITE_ASCII (itm_off + (0x14 * index)) "potn08" #8 // replace item
        // END

        // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*scrl" = 0)  BEGIN // find item
        //   WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
        // END

      END // End of random
    END // End of rx_keep IF
  END // End of area item loop
  LPF DELETE_AREA_ITEM STR_VAR item_to_delete = "misc17" END
BUT_ONLY // End of areas pass 1

// // https://gibberlings3.github.io/iesdp/file_formats/ie_formats/are_v1.htm
// COPY_EXISTING_REGEXP GLOB ~^.+\.are$~ ~override~
//   LPF DELETE_AREA_ITEM STR_VAR item_to_delete = "misc17" END
// BUT_ONLY // End of areas pass 2




BEGIN ~Creatures and Joinable NPCs~ DESIGNATED 4000 LABEL ahungry_deletefier_creatures
REQUIRE_PREDICATE (MOD_IS_INSTALLED ~ahungry_deletefier/ahungry_deletefier.tp2~ 1000) ""

PRINT ~
Delete what percent of creature items (books, misc, and some basic items will remain)?
Please enter your answer as an integer. [0-100]~
ACTION_READLN ~del_per_cre~

OUTER_WHILE NOT(IS_AN_INT %del_per_cre%) BEGIN
  PRINT ~Your answer was not an integer.
Please enter your answer as an integer.
What percent of creature items would you like to have disappear?~
  ACTION_READLN ~del_per_cre~
END

PRINT ~Removing %del_per_cre% percent of creature items, please be patient (slow)...~

// ACTION_CLEAR_ARRAY deleted_cre_items

// https://github.com/Gibberlings3/EE_Fixpack/blob/master/eefixpack/files/lib/cd_functions.tpa#L342
// https://gibberlings3.github.io/iesdp/file_formats/ie_formats/cre_v1.htm
//COPY_EXISTING_REGEXP GLOB ~^fuller\.cre$~ ~override~
COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
  // Iterate through items to see replaceable ones vs deleteables
  READ_LONG  0x2bc itm_off
  READ_LONG  0x2c0 itm_num
  TO_LOWER SOURCE_RES

  // https://gibberlings3.github.io/iesdp/files/ids/bg2/general.htm
  // Check if human or not - leave non-humanoids alone
  // READ_BYTE 0x271 general_byte
  // Instead of human check, just use the npc array and non-droppable flag

  //PATCH_IF (general_byte = 0x1) BEGIN

  // If an NPC, we'll remove some items which aren't themselves
  // flagged as undroppable (Edwin Amulet, Boo etc.)
  // FIXME: Maybe allow this as an option, but I think for now lets comment it out
  // It's nice to get rid of OP gear on a joinable, but it means Dorn would be missing
  // his sword, and Drizzt and friends would be missing gear.  Maybe even Hexxat and
  // her coffin...
  // PATCH_IF (VARIABLE_IS_SET $joinable_npcs("%SOURCE_RES%")) BEGIN
  //   FOR (index = 0 ; index < itm_num ; ++index) BEGIN // searches through items
  //     READ_ASCII (itm_off + (0x14 * index)) item
  //     TO_LOWER item

  //     PATCH_IF (RANDOM(1 100) <= %del_per_cre%) BEGIN
  //       PATCH_IF (VARIABLE_IS_SET $enchanted_items("%item%")) BEGIN
  //         READ_LONG (itm_off + (0x14 * index) + 0x10) itm_flags
  //         PATCH_IF (0 = (itm_flags BAND BIT3)) BEGIN
  //           WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8
  //         END
  //       END
  //     END
  //   END
  // END

  // If NOT an NPC, we'll just flag items as undroppable to simulate
  // them being deleted, without lowering the power level
  PATCH_IF (!VARIABLE_IS_SET $joinable_npcs("%SOURCE_RES%")) BEGIN
    FOR (index = 0 ; index < itm_num ; ++index) BEGIN // searches through items
      READ_ASCII (itm_off + (0x14 * index)) item
      TO_LOWER item

      // Avoid removing basic items
      PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_keep%" = 1
            AND "%item%" STRING_COMPARE_REGEXP "%rx_keep_2%" = 1) BEGIN
        PATCH_IF (RANDOM(1 100) <= %del_per_cre%) BEGIN
          PATCH_IF (VARIABLE_IS_SET $enchanted_items("%item%")) BEGIN
            // flag_undroppable equivalent
            WRITE_LONG (itm_off + (0x14 * index) + 0x10) (THIS BOR BIT3)
            // DEFINE_ASSOCIATIVE_ARRAY deleted_cre_items BEGIN "%item%" => "x" END

            // WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*staf" = 0) BEGIN // find staff item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "staf01" #8 // replace with staf01
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw1h" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "sw1h01" #8 // replace item
            // END

            // // Unconventional mod weapons
            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_weap%" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "sw1h01" #8 // replace item
            // END

            // // Unconventional mod armor
            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_armr%" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
            // END

            // // Unconventional DS stuff
            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP "%rx_uncon_ds%" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw2h" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "sw2h01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*dagg" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "dagg01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ax1h" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "ax1h01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ax2h" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "ax1h01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sper" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "sper01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hamm" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "hamm01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*halb" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "halb01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*blun" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "blun01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*scim" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*waki" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*kata" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*sw3h" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "sw1h04" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*mace" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "blun04" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shield" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "shld01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shld" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "shld01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shbu" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "shld08" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shlg" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "shld04" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shmd" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "shld03" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*shsm" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "shld01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*xbow" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "xbow01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bow" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "bow05" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*slng" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "slng01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hel" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*helm" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ioun" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*cowl" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "helm01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*amul" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "amul02" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*boot" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*belt" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "belt01" #8 // replace item
            // END

            // // clck handles cloaks AND robes for some reason...
            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*clck" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*ring" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "ring01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*brac" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "brac05" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*robe" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "clck11" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*leat" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*chan" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "chan01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plat" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "plat01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*armr" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*slea" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*pelt" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*hide" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "leat01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*chan" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "chan01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*spli" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "chan04" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plah" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "plat01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*plaf" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "plat01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*arow" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "arow01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*dart" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "dart01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bull" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "bull01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*bolt" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "bolt01" #8 // replace item
            // END

            // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*dart" = 0) BEGIN // find item
            //   WRITE_ASCII (itm_off + (0x14 * index)) "dart01" #8 // replace item
            // END

          END // end of enchanted

          // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*wand" = 0) BEGIN // find item
          //   WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
          // END

          // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*potn" = 0) BEGIN // find item
          //   WRITE_ASCII (itm_off + (0x14 * index)) "potn08" #8 // replace item
          // END

          // PATCH_IF ("%item%" STRING_COMPARE_REGEXP ".*scrl" = 0) BEGIN // find item
          //   WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
          // END

          // Delete random treasure items with the usual probability check
          PATCH_IF ("%item%" STRING_COMPARE_REGEXP "^rndtre" = 0) BEGIN // find item
            WRITE_ASCII (itm_off + (0x14 * index)) "misc17" #8 // replace item
          END

        END // End of rand
      END // End of rx_keep IF
    END // End of the item loop
  END // End of the joinable check
  LPF DELETE_CRE_ITEM STR_VAR item_to_delete = "misc17" END
BUT_ONLY // end of items pass 1

// GiveItem("DAGG02",LastTalkedToBy)
// Now fix up any references to these items to ensure we do not keep them
// flagged as undroppable when quest interactions trigger them.
// CamDawg recommendation/idea to patch existing scripts using GiveItem
// and pair it up with the necessary SetItemFlags()
// https://github.com/Gibberlings3/Tweaks-Anthology/blob/master/cdtweaks/lib/increase_scripts.tpa
COPY_EXISTING_REGEXP GLOB ~^.+\.bcs$~ ~override~
  DECOMPILE_AND_PATCH BEGIN
    PATCH_SILENT
    REPLACE_TEXTUALLY ~GiveItem(~ ~GiveItemCreate(~
    // PATCH_PHP_EACH deleted_cre_items AS item => ignoreme BEGIN
      // REPLACE_TEXTUALLY ~StartStore("\([^"]+\)".*~ ~\1~
      // PATCH_PRINT ~Item is: "%item%"~
      // REPLACE_TEXTUALLY ~GiveItem("%item%"~ ~SetItemFlags("%item%",NONDROPABLE,FALSE)GiveItem("%item%"~
      // REPLACE_TEXTUALLY ~GiveItem("%item%"~ ~GiveItemCreate("%item%"~
    // END
  END
BUT_ONLY // IF ~116OB~

COPY_EXISTING_REGEXP GLOB ~^.+\.dlg$~ ~override~
  DECOMPILE_AND_PATCH BEGIN
    PATCH_SILENT
    // This will cause some warnings that it'll recover from re: default params - that is easier than
    // trying to make a regex to handle GiveItem("dagg02",LastTalkedToBy) and also GiveItem("dagg02",foo())
    // as we would not have a clear terminator to find the end of the match
    REPLACE_TEXTUALLY ~GiveItem(~ ~GiveItemCreate(~
    // REPLACE_TEXTUALLY ~GiveItem("\([^"]+\)")~ ~GiveItemCreate("\1",1,1,1)~
    // PATCH_PHP_EACH deleted_cre_items AS item => ignoreme BEGIN
      // REPLACE_TEXTUALLY ~GiveItem("%item%"~ ~SetItemFlags("%item%",NONDROPABLE,FALSE)GiveItem("%item%"~
      // REPLACE_TEXTUALLY ~GiveItem("%item%"~ ~SetItemFlags("%item%",NONDROPABLE,FALSE)GiveItem("%item%"~
      // REPLACE_TEXTUALLY ~GiveItem("%item%"~ ~GiveItemCreate("%item%"~
    // END
  END
BUT_ONLY IF ~GiveItem(~

// COPY_EXISTING_REGEXP GLOB ~^.+\.cre$~ ~override~
//   // Get rid of the PHer items we stubbed in
//   LPF DELETE_CRE_ITEM STR_VAR item_to_delete = "misc17" END

//   // Get rid of all random treasures that would usually drop
//   // LPF DELETE_CRE_ITEM STR_VAR item_to_delete = "rndtre.." END
// BUT_ONLY // end of items pass 2

// BEGIN ~Create Rescue Script 'Custom(uxdelfix)'~ DESIGNATED 5000 LABEL ahungry_deletefier_baf
// REQUIRE_PREDICATE (MOD_IS_INSTALLED ~ahungry_deletefier/ahungry_deletefier.tp2~ 1000) ""

// Some idea to build up a dynamic user based script
// OUTER_SPRINT set_item_flags ~~

// COPY_EXISTING_REGEXP GLOB ~^.+\.itm$~ ~override~
//   TO_LOWER SOURCE_RES

//   <<<<<<<< .../ahungry_deletefier-inlined/script.baf
//       SetItemFlags("%myvar%",NONDROPABLE,FALSE)
//   >>>>>>>>
//   EXTEND_BOTTOM ~uxdelfix.bcs~ ~.../ahungry_deletefier-inlined/script.baf~
//     SPRINT myvar = ~%SOURCE_RES%~
//     EVALUATE_BUFFER

// BUT_ONLY

// <<<<<<<< .../ahungry_deletefier-inlined/script.baf
// IF
//   HotKey(N)
// THEN
//   RESPONSE #100
//     %my_set_item_flags%
// END
// >>>>>>>>
// EXTEND_BOTTOM ~uxdelfix.bs~ ~.../ahungry_deletefier-inlined/script.baf~
//   SPRINT my_set_item_flags = ~%set_item_flags%~
//   EVALUATE_BUFFER
